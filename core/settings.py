"""
Django settings for crypto consulting project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta


def access_secret_version(project_id, secret_id, version_id="latest"):
    """
    Access the payload for the given secret version if one exists. The version
    can be a version number as a string (e.g. "5") or an alias (e.g. "latest").
    """

    # Import the Secret Manager client library.
    from google.cloud import secretmanager

    # Create the Secret Manager client.
    client = secretmanager.SecretManagerServiceClient()

    # Build the resource name of the secret version.
    name = client.secret_version_path(project_id, secret_id, version_id)

    # Access the secret version.
    response = client.access_secret_version(request={"name": name})

    # WARNING: Do not print the secret in a production environment - this
    # snippet is showing how to access the secret material.
    payload = response.payload.data.decode('UTF-8')

    return payload  # [-1] was removed. strip away extra new line char


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# can't hide this, would need it to query itself
# if you wish to test with another project, set your own env var accordingly
if os.getenv('GOOGLE_CLOUD_PROJECT', None):
    PROJECT_ID = os.getenv('GOOGLE_CLOUD_PROJECT', None)
    SECURE_HSTS_SECONDS = 15768000
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    DEBUG = False
    ANGULAR_URL = 'https://respira-air.com/'

    print('Using GAE env var:', PROJECT_ID)
else:
    PROJECT_ID = os.environ['PROJECT_ID_OVERRIDE']
    DEBUG = True
    ANGULAR_URL = 'https://localhost:4200/'

    print('Using default PROJECT_ID:', PROJECT_ID)


os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "%s-key.json" % PROJECT_ID

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a^h98sbjnxrrjtm^wuix3a9_9l05_heqeatmpu)emxqs^_=$8a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTH_USER_MODEL = 'accounts.CustomUser'

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # local
    'accounts',
    'questions',
    'discount',

    # 3rd party
    'rest_framework',
    'gql',
    'corsheaders',
    'social_django',
    'django_extensions',
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

CORS_ORIGIN_ALLOW_ALL = False
CORS_ORIGIN_WHITELIST = (
    'http://localhost:4200',
    'https://localhost:4200',
    'http://localhost:8000',
    'https://localhost:8000',
)

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Mailgun credentials here
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

GCP_HOST = '/cloudsql/' + access_secret_version(PROJECT_ID, 'DB_CONNECTION_STRING')
LOCAL_HOST = ('/cloudsql/' + os.environ.get('LOCAL_HOST_OVERRIDE')) if os.environ.get(
    'LOCAL_HOST_OVERRIDE') != None else '127.0.0.1'
LOCAL_PORT = os.environ.get('LOCAL_PORT_OVERRIDE') if os.environ.get(
    'LOCAL_PORT_OVERRIDE') != None else '5432'  # else default postgreSQL server port
USER = access_secret_version(PROJECT_ID, 'RESPIRA_DB_USER')
PASSWORD = access_secret_version(PROJECT_ID, 'RESPIRA_DB_PASSWORD')
NAME = access_secret_version(PROJECT_ID, 'RESPIRA_DB_NAME')
DB_HOST = access_secret_version(PROJECT_ID, 'RESPIRA_DB_HOST')

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DEV = 1
if os.getenv('GAE_APPLICATION', None):
    # Running on production App Engine, so connect to Google Cloud SQL using
    # the unix socket at /cloudsql/<your-cloudsql-connection string>
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': NAME,
            'USER': USER,
            'PASSWORD': PASSWORD,
            'HOST': DB_HOST,
            'PORT': LOCAL_PORT,
            'OPTIONS': {
                'sslmode': 'verify-ca',
                'sslrootcert': 'server-ca.pem',
                "sslcert": "client-cert.pem",
                "sslkey": "client-key.pem",
            }
        }
    }

    # added for production
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # done

    ALLOWED_HOSTS = [access_secret_version(PROJECT_ID, 'ALLOWED_HOST')]
    print('Running in GCP')
    print('GCP_HOST:', GCP_HOST)
else:
    if DEV == 1:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
    elif DEV == 2:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': NAME,
                'USER': USER,
                'PASSWORD': PASSWORD,
                'HOST': DB_HOST,
                'PORT': LOCAL_PORT,
                'OPTIONS': {
                    'sslmode': 'verify-ca',
                    'sslrootcert': 'server-ca.pem',
                    "sslcert": "client-cert.pem",
                    "sslkey": "client-key.pem",
                }
            }
        }
    ALLOWED_HOSTS = ['*']
    print('Running in local mode')
    print('LOCAL_HOST:', LOCAL_HOST)
    print('LOCAL_PORT:', LOCAL_PORT)


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# Run this command to update fields if new languages are added: python manage.py update_translation_fields, python manage.py sync_translation_fields
gettext = lambda s: s
LANGUAGES = (
    ('en', gettext('English')),
    ('fr', gettext('French')),
)

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
if not os.getenv('GAE_APPLICATION', None):
    COMPRESS_PRECOMPILERS = (
        ('text/x-scss', 'django_libsass.SassCompiler'),
    )

VENV_DIR = os.path.dirname(BASE_DIR)

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static_cdn')
print(STATIC_ROOT, os.path.exists(STATIC_ROOT))

if not os.getenv('GAE_APPLICATION', None):
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media_cdn')
else:
    # Keep all comments for reference, may need to them later.
    # DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

    DEFAULT_FILE_STORAGE = 'phyto.gcloud.GoogleCloudMediaFileStorage'
    STATICFILES_STORAGE = 'phyto.gcloud.GoogleCloudStaticFileStorage'
    GS_QUERYSTRING_AUTH = False

    GS_BUCKET_NAME = PROJECT_ID
    GS_MEDIA_BUCKET_NAME = PROJECT_ID
    GS_STATIC_BUCKET_NAME = PROJECT_ID
    STATIC_URL = access_secret_version(PROJECT_ID, 'BUCKET_STATIC_URL')
    MEDIA_URL = access_secret_version(PROJECT_ID, 'BUCKET_MEDIA_URL')

SESSION_COOKIE_SAMESITE = 'None'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME ': timedelta(days=7),
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.apple.AppleIdAuth',
]

# SSO Django social auth settings
SESSION_COOKIE_SAMESITE = None
SESSION_COOKIE_SECURE = False
SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/api/sso-register-login/'

SOCIAL_AUTH_FACEBOOK_KEY = '944925009432517'
SOCIAL_AUTH_FACEBOOK_SECRET = 'e96bf6ba9aae7c62b7ba6dcbbd1b8491'
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id,name,email',
}

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '55773043160-kniootugpnptftcpnritd9q7t01llodq.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'
SOCIAL_AUTH_GOOGLE_OAUTH2_USER_FIELDS = ['first_name', 'last_name', 'email']
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = { 'prompt': 'select_account' }

SOCIAL_AUTH_APPLE_ID_CLIENT = 'cryptoconsult.com'
SOCIAL_AUTH_APPLE_ID_TEAM = 'C373XNS5XC'
SOCIAL_AUTH_APPLE_ID_KEY = 'NKCB3J9YBK'
SOCIAL_AUTH_APPLE_ID_SECRET = """
-----BEGIN PRIVATE KEY-----
MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgk/EqltozWCYtP+9E
XO+o2xLLFtzGgnYuFYilzuv6vD+gCgYIKoZIzj0DAQehRANCAATqNaKRF4tsHEGL
ffSkuGdiH47gZyXdUu2nfnYg39mPFwsYUJRufCGGfVaiDKi4QIcWLELPVobV7+j7
JV4U5r26
-----END PRIVATE KEY-----"""
SOCIAL_AUTH_APPLE_ID_SCOPE = ['email', 'name']
USE_X_FORWARDED_HOST = True

SOCIAL_AUTH_UUID_LENGTH = 4

SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. In some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    'social_core.pipeline.social_auth.social_user',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',

    # Create the record that associates the social account with the user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',
)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
